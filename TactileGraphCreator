// holds last picked node with key pressed to connect edge
Node prevPicked, picked;
// holds nodes
ArrayList<Node> nodes = new ArrayList<>();
// holds if the connect key is pressed
boolean pressedC = false;
// slide to wait for number of nodes
int slide = 0;
// number of nodes
int numNodes;
// if the user has entered a valid size
boolean validSizeGiven = false;
// string typed size
String typedSize = "";
// typing and invalid letter
boolean typingInvalid = false;

void setup(){
    size(500, 500);
    textAlign(CENTER, CENTER);
}

void draw(){
    background(15);
    if(slide == -1){
        displayInstructions();
    }
    if(slide == 0){
        displayTypedSize();
    }
    if(slide == 1){
        drawPickedAndNewConnection();
        drawEdgesAndNodes();
    }
}

void drawPickedAndNewConnection(){
    // drawing the new edge connect line if need be
    if(prevPicked!=null) {
        strokeWeight(5);
        stroke(56, 102, 217);
        line(prevPicked.x, prevPicked.y, mouseX, mouseY);
    }
}

void drawEdgesAndNodes(){
    // drawing edges
    for(Node n : nodes){
        for(Node s : n.edges){
            strokeWeight(5);
            stroke(50);
            line(n.x, n.y, s.x, s.y);
        }
    }
    // drawing nodes
    noStroke();
    for(Node n : nodes) n.display();
}

void mousePressed(){
    if(slide == 1){
        for(Node n : nodes){
        // setting the node to selected if the mouse is on it
            if ((Math.pow((mouseX-n.x), 2)
            + Math.pow((mouseY-n.y), 2))
            < Math.pow(n.size/2, 2)){
                n.p = true;
                picked = n;
            }
        }
        if(pressedC && picked!=null){
            picked.addEdge(prevPicked);
        }
    }
}

void mouseDragged(){
    if(slide == 1){
        // moving the picked node
        if(picked != null){
            picked.x = mouseX;
            picked.y = mouseY;
        }
    }
}

void mouseReleased(){
    if(slide == 1){
        // reseting picked to null
        if(picked != null){
            picked.p = false;
            picked = null;
        } 
    }
}

void keyPressed(){
    if(slide == -1){
        if(keyCode == ENTER){
            slide = 0;
        }
    }
    if(slide == 0){
        if((typedSize.length() == 0) && (key == '0')){
            typingInvalid = true;
        }
        else if((typedSize.length() < 2) && key >= '0' && key <= '9'){
            typedSize+=key;
        }
        else if(keyCode == BACKSPACE && (typedSize.length() > 0)){
            typedSize = typedSize.substring(0, typedSize.length()-1);
        }
        else if(keyCode == ENTER && (typedSize.length() > 0)) {
            numNodes = convertToInt(typedSize);
            fillNodes(numNodes);
            slide = 1;
        }
        else{
            typingInvalid = true;
        }
    }
    if(slide == 1){
        // selecting the node to make new edges for
        if(key == 'c'){
            prevPicked = picked;
            pressedC = !pressedC;
        }
        // clear all edges
        if(key == 'x'){
            for(Node n : nodes) n.edges.clear();
        }
        // restart
        if(key == 'r'){
            prevPicked = null;
            nodes.clear();
            slide = 0;
            typedSize = "";
        }
    }
}

void fillNodes(int size){
    for(int i = 0; i<size; i++) nodes.add(new Node());
    
}

int convertToInt(String s){
    int num = 0;
    for(int i = s.length()-1; i>=0; i--){
        int curr = s.charAt(i)-'0';
        num+=(curr * Math.pow(10, s.length()-1-i));
    }
    return num;
}

void keyReleased(){
    typingInvalid = false;
}

void displayTypedSize(){
    
    textSize(15);
    fill(100);
    text("Please enter the number of nodes you would like (1-99)", width/2, (height/2)-100);
    
    textSize(50);
    fill(200);
    text(typedSize, width/2, height/2);
    
    if(typingInvalid){
        fill(150, 0, 0);
        textSize(20);
        text("You are typing an invalid size", width/2, (height/2)+100);
    }
}

void displayInstructions(){
    // TODO: fill
}

class Node {
    float x, y;
    int size;
    boolean p;
    HashSet<Node> edges;
    
    Node(){
        x = random(20, width-20);
        y = random(20, height-20);
        p = false;
        size = 40;
        edges = new HashSet<>();
    }
    
    Node(float xPos, float yPos){
        x = xPos;
        y = yPos;
        p = false;
        size = 40;
        edges = new HashSet<>();
    }
    
    void display(){
        if(p) fill(60, 6, 167);
        else fill(110, 56, 217);
        ellipse(x, y, size, size);
    }
    
    void addEdge(Node n){
        edges.add(n);
    }
}
