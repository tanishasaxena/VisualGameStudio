
int pRow, pCol = 0;
int PLAIN = 0;
int UNPAINTED = 1;
int PAINTED = 2;
int BUCKET = 3;
int GOAL = 4;

// stores the color of the paint the player holds
int[] brushColor = {0, 0, 0};

boolean moveUp = false;
boolean moveDown = false;
boolean moveLeft = false;
boolean moveRight = false;


int WALL = 4;
// order: row, col, {top, bottom, left, right}
// if the value = wall, the player stops (if only top == WALL then only covers upper wall but not left right or down, etc because there are four sides to each square)
int[][][] platforms = new int[15][15][4];

// holds the paint status of each position
int[][] grid = new int[15][15];

int screen = 0;
int level = 0;

void setup(){
    size(600, 600);
    
    for(int i = 0; i<grid.length; i++){
        for(int j = 0; j<grid[0].length; j++){
            grid[i][j] = PLAIN;
        }
    }
    // setting the outer edge to walls
    for(int i = 0; i<grid.length; i++){
        for(int j = 0; j<grid[0].length; j++){
            if(i == 0){
                // left wall
                platforms[i][j][2] = WALL;
            }
            if(i == grid.length-1){
                // right wall
                platforms[i][j][3] = WALL;
            }
            if(j == 0){
                // top wall
                platforms[i][j][0] = WALL;
            }
            if(j == grid[0].length-1){
                // bottom wall
                platforms[i][j][1] = WALL;
            }
        }
    }
}


void draw(){
    if(screen == 0){
        
        background(0);
        fill(255);
        textSize(30);
        text("Click to start", width/2, height/2);
        
    }
    else if (screen == -1){
        background(0, 255, 0);
        drawGrid();
        drawWalls();
        playerControls();
    }
    else if (screen == 1){
        initLvlOne();
        level = 1;
        screen = -1;
    }
    else if(screen == 2){
        background(0);
        fill(255);
        textSize(30);
        text("You won", width/2, height/2);
    }
    else if (screen == 3){
        level = 2;
        screen = -1;
    }
    
    
    
}

void initLvlOne(){
    
    for(int i = 5; i < 10; i++){
        grid[7][i] = UNPAINTED;
        grid[3][i] = UNPAINTED;
        grid[10][i] = UNPAINTED;
    }
    
    
    pRow = 7; 
    pCol = grid[0].length-1;
    
    platforms[7][grid[0].length-1][3] = WALL;
    platforms[8][grid[0].length-1][2] = WALL;
    
    platforms[3][0][3] = WALL;
    platforms[4][0][2] = WALL;
    
    platforms[9][grid[0].length-1][3] = WALL;
    platforms[10][grid[0].length-1][2] = WALL;
    
    grid[4][0] = BUCKET;
    
    grid[grid.length-1][0] = GOAL;
    
}

void playerControls(){
    
    fill(125, 83, 0);
    ellipse(pRow*40+20, pCol*40+20, 40, 40);
    
    fill(brushColor[0], brushColor[1], brushColor[2]);
    ellipse(pRow*40+20, pCol*40+20, 20, 20);
    
    if(moveUp){
        pCol = pCol - 1;
        if(platforms[pRow][pCol][0] == WALL){
            moveUp = false;
        }
        
    }
    if(moveDown){
        pCol = pCol + 1;
        if(platforms[pRow][pCol][1] == WALL){
            moveDown = false;
        }
    }
    if(moveLeft){
        pRow = pRow - 1;
        if(platforms[pRow][pCol][2] == WALL){
            moveLeft = false;
        }
    }
    if(moveRight){
        pRow = pRow + 1;
        if(platforms[pRow][pCol][3] == WALL){
            moveRight = false;
        }
    }
    
    
    if(grid[pRow][pCol] == BUCKET){
        brushColor[0] = 255;
        brushColor[1] = 0;
        brushColor[2] = 0;
    }
    
    if(grid[pRow][pCol] == UNPAINTED && brushColor[0] == 255){
        grid[pRow][pCol] = PAINTED;
    }
    
    boolean finished = true;
    for(int i = 0; i < grid.length; i++){
        for(int j = 0; j < grid[0].length; j++){
            if(grid[i][j] == UNPAINTED) finished = false;
        }
    }
    if(grid[pRow][pCol] == GOAL && finished){
        screen = level + 1;
    }
}

void keyPressed(){
    if(keyCode == UP
        && platforms[pRow][pCol][0] != WALL
        && !moveDown
        && !moveLeft
        && !moveRight){
        moveUp = true;
    }
    if(keyCode == DOWN
        && platforms[pRow][pCol][1] != WALL
        && !moveUp
        && !moveLeft
        && !moveRight){
        moveDown = true;
    }
    if(keyCode == RIGHT
        && platforms[pRow][pCol][3] != WALL
        && !moveDown
        && !moveLeft
        && !moveUp){
        moveRight = true;
    }
    if(keyCode == LEFT
        && platforms[pRow][pCol][2] != WALL
        && !moveDown
        && !moveUp
        && !moveRight){
        moveLeft = true;
    }
}


void drawGrid(){
    for(int i = 0; i<grid.length; i++){
        for(int j = 0; j<grid[0].length; j++){
            //noStroke();
            
            if(grid[i][j] == PLAIN){
                fill(230, 203, 163);
                rect(i*40, j*40, 40, 40);
            }
            
            else if(grid[i][j] == UNPAINTED){
                fill(255, 186, 186);
                rect(i*40, j*40, 40, 40);
            }
            
            else if(grid[i][j] == PAINTED){
                fill(219, 44, 44);
                rect(i*40, j*40, 40, 40);
            }
            
            else if(grid[i][j] == BUCKET){
                fill(230, 203, 163);
                rect(i*40, j*40, 40, 40);
                
                fill(255, 0, 0);
                ellipse(i*40+20, j*40+20, 40, 40);
            }
            else if(grid[i][j] == GOAL){
                fill(230, 203, 163);
                rect(i*40, j*40, 40, 40);
                
                fill(0, 255, 0);
                ellipse(i*40+20, j*40+20, 40, 40);
            }
        }
    }
}

void drawWalls(){
    for(int i = 0; i<platforms.length; i++){
        for(int j = 0; j<platforms[0].length; j++){
            //noStroke();
            fill(84, 56, 15);
            if(platforms[i][j][0] == WALL){
                // top
                rect(i*40, j*40, 40, 5);
            }
            if(platforms[i][j][1] == WALL){
                // bottom
                rect(i*40, j*40+35, 40, 5);
            }
            if(platforms[i][j][2] == WALL){
                // left
                rect(i*40, j*40, 5, 40);
            }
            if(platforms[i][j][3] == WALL){
                // right
                rect(i*40+35, j*40, 5, 40);
            }
        }
    }
}

void mousePressed(){
    if(screen == 0) screen = 1;
}
