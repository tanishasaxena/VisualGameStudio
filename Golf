String ballUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/58/White_Circle.svg/1024px-White_Circle.svg.png";
String goalUrl = "https://static.wikia.nocookie.net/black-magic-ii/images/f/f7/Void_Energy.png/revision/latest/scale-to-width-down/340?cb=20200703162900";

Sprite ball = new Sprite(ballUrl, 800, 700, 50, 50);
Sprite goal = new Sprite(goalUrl, random(25, 975), random(25, 775), 90, 90);
// slope of line
float m = 0.0;
// y intercept of line
float b = 0.0;
// speed of ball
float ballSpeed = 0.0;
// how fast does it slow down
float friction = 0.1;
// easier names for variables
Point p = new Point(ball.getX(), ball.getY());

Point mou = new Point(mouseX, mouseY);
// points to move towards
Point dir = new Point(0, 0);

int score = 10;

int stage = 0;

void setup(){
    size(1000, 800);
    colorMode(HSB, 360, 90, 90);
    //ball.setColor(0, 0, 255);
    //goal.setColor(110, 100, 77);
}


void draw(){
    // looked ugly -- fading background creates a trail for the ball
    /// fill(182, 87, 44, 100);
    /// rect(0, 0, 1000, 800);
    if(stage == 0){
        background(182, 87, 44);
        textSize(50);
        textAlign(CENTER, CENTER);
        text("Click to Start! \n (Instructions in description)", 500, 500);
    }
    if(stage == 1){
        background(182, 87, 44);
        
        initVars();
        if(ballSpeed == 0.0){
            drawPower();
        }
        scoreDisplay();
        goalControls();
        ballControls();
        if(score <= 0){
            stage = 2;
        }
    }
    if (stage == 2){
        background(182, 87, 44);
        textSize(50);
        textAlign(CENTER, CENTER);
        text("You have no more hits :( \n Click to start again!", 500, 500);
    }
}

void ballControls(){
    ball.display();
    // making it move
    ball.forward(ballSpeed);
    if(ballSpeed > 0.0){
        ballSpeed-=friction;
        friction+=0.001;
    }
    if(ballSpeed < 1.0){
        ballSpeed = 0.0;
        friction = 0.1;
    }
    // makes ball bounce off top, bottom, left, right
    bounceOffWalls();
    
}

void goalControls(){
    goal.display();
    if(ballSpeed < 10.0 && ball.touchingSprite(goal)){
        goal.moveToPoint(random(25, 975), random(25, 775));
        
        // increase score to add points
        score+=5;
    }
}

void scoreDisplay(){
    fill(0, 0, 255);
    textSize(50);
    text(score, 900, 100);
}

void bounceOffWalls(){
    // left wall
    if(p.x < 0){
        // find the reflected over x = p.x line
        Point temp1 = new Point(p.x + (p.x - dir.x), dir.y);
        
        m = (temp1.y-p.y) / (temp1.x-p.x);
        b = p.y - (p.x * m);
        
        float temp2 = (1100 * m) + b; 
        dir.x = 1100;
        dir.y = temp2;
        
        ball.turnToPoint(dir.x, dir.y);
    }
    
    // right wall
    if(p.x > width){
        // find the reflected over x = p.x line
        Point temp1 = new Point(p.x - (dir.x-p.x), dir.y);
        
        m = (temp1.y-p.y) / (temp1.x-p.x);
        b = p.y - (p.x * m);
        
        float temp = (-100 * m) + b;
        dir.x = -100;
        dir.y = temp;
        
        ball.turnToPoint(dir.x, dir.y);
    }
    
    // top wall
    if(p.y < 0){
        // find the reflected over y = p.y line
        Point temp1 = new Point(dir.x, p.y + (p.y - dir.y));
        
        m = (temp1.y-p.y) / (temp1.x-p.x);
        b = p.y - (p.x * m);
        
        float temp = (900 - b)/m;
        dir.x = temp;
        dir.y = 900;
        
        ball.turnToPoint(dir.x, dir.y);
    }
    
    // bottom wall
    if(p.y > height){
        // find the reflected over y = p.y line
        Point temp1 = new Point(dir.x, p.y - (dir.y-p.y));
        
        m = (temp1.y-p.y) / (temp1.x-p.x);
        b = p.y - (p.x * m);
        
        float temp = (-100 - b)/m;
        dir.x = temp;
        dir.y = -100;
        
        ball.turnToPoint(dir.x, dir.y);
    }
}

void mousePressed(){
    
    if(stage == 0){
        stage = 1;
    }
    else if (stage == 1){
        m = (mou.y-p.y) / (mou.x-p.x);
        b = p.y - (p.x * m);
        
        if(mou.x > p.x){
            float temp = (-100 * m) + b;
            dir.x = -100;
            dir.y = temp;
        }
        else{
            float temp = (1100 * m) + b;
            dir.x = 1100;
            dir.y = temp;
        }
        
        ball.turnToPoint(dir.x, dir.y);
        
        ballSpeed = dist(mou.x, mou.y, p.x, p.y) / 10;
        
        // decrease score to count strokes
        score--;
    }
    else {
        stage = 1;
        score = 10;
    }
}

// draw line to indicate power of hit
void drawPower(){
    float power = dist(mou.x, mou.y, p.x, p.y) / 10;
    
    if(power < 20){
        stroke(59, 60, 70);
    }
    else if (power < 40){
        stroke(42, 62, 68);
    }
    else if (power < 60){
        stroke(12, 66, 66);
    }
    else {
        stroke(0, 70, 59);
    }
    strokeWeight(15);
    line(mou.x, mou.y, p.x, p.y);
    
}

// setting the var names to make them easier to type
void initVars(){
    p.x = ball.getX();
    p.y = ball.getY();
    mou.x = mouseX;
    mou.y = mouseY;
}

class Point {
    float x;
    float y;
    
    Point(float xx, float yy){
        x = xx;
        y = yy;
    }
}


/*
How to calculate the direction of the ball
- find the line it is on ball-to-mouse
- find if the mouse if on the left or right of the ball
- if it is on the right, use x=-100 as the point of the turnToPoint
- calculate y based on line equation
- WHEN CLICK:
-- forward 10, exponentially decreasing



*/
